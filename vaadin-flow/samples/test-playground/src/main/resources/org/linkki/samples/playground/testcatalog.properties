
TS001 = Basic Elements Layout Behavior

TS001.TC001             = @UISection
TS001.TC001.description = Tests the behavior of all basic UI elements in an @UISection with different section layouts
TS001.TC001.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nSectionLayout.FORM (default): Components should be displayed stacked in a column. All elements, including labels, links, check boxes and buttons have labels. All labels should be displayed in front of the component\nSectionLayout.HORIZONTAL: Components should be displayed next to each other in a row. Labels, links, check boxes and buttons do not have labels. All labels should be displayed on top of the component\nSectionLayout.VERTICAL: Components should be displayed stacked in a column. Labels, links, check boxes and buttons do not have labels. All labels should be displayed on top of the component.
TS001.TC002             = @UIFormSection
TS001.TC002.description = Tests the behavior of all basic UI elements in an @UIFormSection
TS001.TC002.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nAll elements, including labels, links, check boxes and buttons have labels\nSetting a custom width for labels in FormLayout
TS001.TC003             = @UIHorizontalLayout
TS001.TC003.description = Tests the behavior of all basic UI elements in an @UIHorizontalLayout
TS001.TC003.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC004             = @UIVerticalLayout
TS001.TC004.description = Tests the behavior of all basic UI elements in an @UIVerticalLayout
TS001.TC004.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC005             = @UIFormLayout
TS001.TC005.description = Tests the behavior of all basic UI elements in an @UIFormLayout
TS001.TC005.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC006             = @UICssLayout
TS001.TC006.description = Tests the behavior of all basic UI elements in an @UICssLayout
TS001.TC006.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels

TS002 = Section Component

TS002.TC001             = @SectionHeader
TS002.TC001.description = Tests creation of header components using @SectionHeader
TS002.TC001.items       = Buttons should be created in section header.\nText field without @SectionHeader annotation should not be in the section header even if the position is inbetween the section header components.
TS002.TC002             = GridSection layout
TS002.TC002.description = Tests the layout of GridSection
TS002.TC002.items       = If vertical space run out, only the grid should scroll.
TS002.TC003             = @UISection layouts
TS002.TC003.description = Tests component widths in different layouts
TS002.TC003.items       = SectionLayout.FORM (default): @UITextField and @UITextArea should have a default width of 100%. @UIIntegerField should NOT have a default of 100%. Labels are shown on the left of the component.\nSectionLayout.HORIZONTAL: @UITextField, @UITextArea and @UIIntegerField should have a default width of 100%. Labels are shown on top of the component.\nSectionLayout.VERTICAL: @UITextField and @UITextArea should have a default width of 100%. @UIIntegerField should NOT have a default of 100%. Labels are shown on top of the component.
TS002.TC004             = Section component header
TS002.TC004.description = Tests behavior of the header components in a LinkkiSection
TS002.TC004.items       = Closable section should show close toggle, not closable section should not show close toggle.\nCaption and header components should be vertically center aligned (visual check).\nHeader of a not closable section without caption and header components should take up no space.\nCalling addHeaderButton should add buttons to the left, between the caption and the close toggle.\nCalling addHeaderComponent should add components to the right, between the caption and the close toggle. This should result in [button 2, button 1, combo box, check box, close toggle].\nSection with right aligned component should have a right-aligned button.
TS002.TC005             = Multi columns
TS002.TC005.description = Tests @UIFormSection multi columns
TS002.TC005.items       = Components should be displayed in two columns, ordered row wise.\nThe tab order should be row wise.
TS002.TC006             = Placeholder label
TS002.TC006.description = Tests a label that is styled as a placeholder in a section.
TS002.TC006.items       = The label should look like a placeholder in empty grids and should be correctly aligned.
TS002.TC007             = Theme Variants
TS002.TC007.description = Tests the variants of a section.
TS002.TC007.items       = The section has a card like style\nThe section has the default style defined by the theme
TS002.TC008             = Card Theme Variant On Layouts
TS002.TC008.description = Tests the card sections variant on surrounding layouts. Toggle the buttons to set the variant globally or only to a certain page.
TS002.TC008.items       = Section in affected scope should have a background.\nSection outside of the affected scope should not have a background.\nElements in a card style section should still be readable.\nCard sections in a page should not be as spaced out as not card sections.\nIf card sections is globally set, dialogs should not be affected.\nIt should be possible to explicitly set the theme on the dialog itself or any of the content layouts.

TS003 = Localization

TS003.TC001             = Elements Localization
TS003.TC001.description = Tests the localization of basic elements
TS003.TC001.items       = Localized section title\nLocalized element labels\nLocalized formats (Double, Decimal, Date, Time)\nLocalized button caption\nLocalized element labels from implemented superclass and interface

TS004 = IPS

TS004.TC001             = linkki With Faktor-IPS Model
TS004.TC001.description = IpsPropertyDispatcher Label Binding
TS004.TC001.items       = The label of the Textfield is loaded from the IPS model object documentation.\nIf a subclass of the model object is used, the overwritten label is loaded.\nThe label is also loaded if the model object is null.
TS004.TC002             = @UIDecimalField
TS004.TC002.description = Tests the @UIDecimalField behaviors with
TS004.TC002.items       = Default format\nNo decimal places\nThousands separator\nRange checks with error messages
TS004.TC003             = IpsPropertyDispatcher on required
TS004.TC003.description = Checks that the IpsPropertyDispatcher uses the ValueSet information to derive the required state.
TS004.TC003.items       = The required marker must be visible only at the first TextField.
TS004.TC004             = IpsPropertyDispatcher on visibility
TS004.TC004.description = Checks that the IpsPropertyDispatcher uses the ValueSet information to derive the visible state.
TS004.TC004.items       = There should be one TextField and one Combobox visible. Another Combobox between them must not be visible.
TS004.TC005             = IpsPropertyDispatcher on Enabled
TS004.TC005.description = Checks that the IpsDispatcher uses the ValueSet information to derive the enabled state.
TS004.TC005.items       = The ValueSet of the first control is not empty and therefore it must be enabled.\nThe ValueSet of the second control is empty and therefore it must be disabled.\nThe ValueSet of the last control is empty but the enabled behavior is dynamically set to enabled.
TS004.TC006             = Decimal as @UILabel
TS004.TC006.description = Tests @UILabel with Decimal value
TS004.TC006.items       = Decimal should be correctly displayed as a @UILabel, using the default format.
TS004.TC007             = IpsPropertyDispatcher on available values
TS004.TC007.description = Shows available values for @UICombobox via model binding.\nAlso tests that combobox values can be set via radio buttons.
TS004.TC007.items       = The first combobox contains an enumeration of integers and the null value is included. \n The second combobox contains an enum and the null value is excluded. \n The third combobox contains a range of integers and the null value is included. \n The fourth combobox contains a set of booleans and the null value is included. \n The fifth combobox should be empty due to an empty value set.
TS004.TC008             = Converters
TS004.TC008.description = Tests converters that can be registered to LinkkiConverterRegistry for fields
TS004.TC008.items       = Money: UITextField should work for data type Money. Example valid inputs: "123 EUR", "123    EUR", "123EUR". Example invalid inputs: "123", "123EU", "EUR"

TS005 = Components

TS005.TC001             = @UILabel
TS005.TC001.description = Components created with @UILabel
TS005.TC001.items       = Using BigDecimal as return value should render without exception.\nLocalDate as return value should be shown using registered converter (dd-MM-yyyy in DE).\nLocalDateTime as return value should be shown using registered converter (dd-MM-yyyy hh:mm in DE).\nEnum as return value should be shown using literal name by default.\nEnum with getName() as return value should be shown using getName() by default.\nDynamic CSS styles should be applied to labels and icons.\nIcons belonging to the text of HTML labels should not be affected by icon-text-color.\nThe icon should be able to appear to the left and right of the label.\nIt should be possible to enable and disable HTML content.\nThe HTML content is sanitized, removing potentially dangerous tags and attributes.\nVaadin icons are not removed by the HTML sanitization.\nIn tables: It should be able to show HTML content.\nIn tables: Long labels should break at white spaces.\nIn tables: It should be possible to make the label right aligned.
TS005.TC002             = @UIIntegerField
TS005.TC002.description = Components created with @UIIntegerField
TS005.TC002.items       = Field starts empty if Integer is used\nField starts with 0 if int is used\nField with default format has thousands separator\nField with user-defined format does not have thousands separator, and does not allow it to be entered
TS005.TC003             = @UIDoubleField
TS005.TC003.description = Components created with @UIDoubleField
TS005.TC003.items       = Field starts empty if Double is used\nField starts with 0.00 if double is used
TS005.TC004             = @UITextArea
TS005.TC004.description = Component created with @UITextArea
TS005.TC004.items       = Field has a size of 5 em
TS005.TC005             = @UITextField
TS005.TC005.description = Component created with @UITextField
TS005.TC005.items       = A vaadin text field created with default values.
TS005.TC006             = @UIDateField
TS005.TC006.description = Component created with @UIDateField
TS005.TC006.items       = The calendar popup should not open by default\nWhen entering a date and pressing "Tab", the focus should move on to the next component if the calendar popup is not opened.
TS005.TC007             = @UIComboBox
TS005.TC007.description = Components created with @UIComboBox
TS005.TC007.items       = The combo box "Without null" cannot be cleared after selecting a value\nThe combo box "With null" can be cleared after selecting a value\nThe combo box with explicitly left aligned items\nThe combo box with center aligned items\nThe combo box with right aligned items\nA combo box with a required but initially empty value is not marked as invalid\nA Combo box with boolean value has (Yes/No) options in english or (Ja/Nein) in german\nClicking on the button to change values should result in update of captions although the item instances are the same, as the combo box is annotated with @BindComboBoxDynamicItemCaption.
TS005.TC008             = @UIRadioButtons
TS005.TC008.description = Components created with @UIRadioButtons
TS005.TC008.items       = The radio buttons use the caption provider\nThe radio buttons "With null" have a "None" item, which is selected by default\nThe radio buttons "Without null" do not have a "None" item, nothing is selected by default\nRadio buttons with boolean use RadioButtonsCaptionProvider by default\nRadio buttons "Primitive boolean" have (Yes/No) options in english or (Ja/Nein) in german\nRadio Buttons "Object Boolean" have additionally "Not Specified" in english or "Keine Angabe" in german\nRadio Buttons in horizontal alignment\nRadio Buttons for object Boolean without null
TS005.TC009             = @UILink
TS005.TC009.description = Component created with @UILink
TS005.TC009.items=The link text updates when "Link Caption" is changed\nThe link href updates when "Link Address" is changed\nThe link icon updates when "Link Icon" is changed\nThe link target updates when "Link Target" is changed\nThe icon should be able to appear to the left and right of the link
TS005.TC010             = @UIButton
TS005.TC010.description = Components created with @UIButton
TS005.TC010.items       = Using Button Variants primary and tertiary\nWhen typing in the text field, hitting 'Enter' should submit the value and trigger the button.\nThe Shortcut Key Events on 'Enter' should not occur when @UITextArea is focused.\nCrtl+Enter in a text area should also submit the value (LIN-2621)\nWhen focusing on the Button with 'Enter' and hitting 'Enter', the value should be only submitted once (LIN-2620)
TS005.TC011             = @UICustomField
TS005.TC011.description = PasswordField component created with @UICustomField
TS005.TC011.items       = A fully functional password field should be shown.
TS005.TC012             = Dynamic Component
TS005.TC012.description = The type of the second component is dynamically changed depending on the selection of the ComboBox.
TS005.TC013             = @UIDateTimeField
TS005.TC013.description = Component created with @UIDateTimeField
TS005.TC013.items       = The calendar and time popups should not open by default\nWhen entering a date and pressing "Tab", the focus should move on to the next component if the calendar popup is not opened.\nIn the time popup, the interval between items should be 1 hour.
TS005.TC014             = @UIYesNoComboBox
TS005.TC014.description = [deprecated] Component created with @UIYesNoComboBox
TS005.TC014.items       = The combo box "Primitive boolean" cannot be cleared\r\nThe combo box "Object Boolean" can be cleared after selecting a value
TS005.TC015             = @UIMultiSelect
TS005.TC015.description = Component created with @UIMultiSelect
TS005.TC015.items       = Selected values in the first multiselect must be displayed read-only in the second
TS005.TC016             = @UITimeField
TS005.TC016.description = Component created with @UITimeField
TS005.TC016.items       = The time popup should not open by default\nWhen entering a time and pressing "Tab", the focus should move on to the next component if the time popup is not opened\nThe time field with 30 minute steps only displays hour and minutes. In the time popup, the interval between items should be 30 minutes\nThe time field with 15 second steps displays hour, minutes and seconds. The time picker overlay is disabled to prevent an impractical number of choices. It is still possible to change the value in 15 second steps with the up and down arrow keys.
TS005.TC017             = @UICheckboxes
TS005.TC017.description = Components created with @UICheckboxes
TS005.TC017.items       = Default: values can be selected.\nDisabled: No selection is possible. Selected values are still reflected.\nRequired: Displays a required indicator on the label.\nRead-only: No selection is possible. The selection can be easily recognized. The captions are readable.\nHorizontal Alignment
TS005.TC018             = @UILongField
TS005.TC018.description = Component created with @UILongField
TS005.TC018.items       = Field starts empty if Long is used\nField starts with 0 if long is used\nField with default format has thousands separator\nField with user-defined format does not have thousands separator, and does not allow it to be entered

TS006 = LinkkiText

TS006.TC001             = LinkkiText
TS006.TC001.description = Tests the update and UI behavior of LinkkiText.
TS006.TC001.items       = The HTML content is sanitized, removing potentially dangerous tags and attributes\nVaadin icons are not removed by the HTML sanitization\nSetting and changing the text\nSetting and changing the icon type\nRemoving the icon\nIcons should have correct size and position\nIcons of prefix/suffix components should have correct sizes and positions
TS006.TC002             = LinkkiAnchor
TS006.TC002.description = Tests the appearance and behavior of LinkkiAnchor.
TS006.TC002.items       = Opening page in new tab\nIcon should have correct size and position\nIcons of prefix/suffix components should have correct sizes and positions

TS007 = [Horizontal|Vertical]Layout

TS007.TC001             = Vertical Alignment in HorizontalLayout
TS007.TC001.description = Three HorizontalLayouts with a fixed height next to each other. Each layout contains one TextField with a specific alignment set.
TS007.TC001.items       = The TextField of the first layout should be placed at the top\nThe TextField of the second layout should be placed in the middle\nThe TextField of the third layout should be placed at the bottom of the layout\nThe TextField of the fourth layout should be placed at the top/baseline of the layout which is the default
TS007.TC002             = Horizontal Alignment in VerticalLayout
TS007.TC002.description = Three VerticalLayouts with a fixed width next to each other. Each layout contains one TextField with a specific alignment set.
TS007.TC002.items       = The TextField of the first layout should be placed on the left\nThe TextField of the second layout should be placed in the middle\nThe TextField of the last layout should be placed on the right of the layout
TS007.TC003             = Spacing and Padding in HorizontalLayout
TS007.TC003.description = There are three HorizontalLayouts each contains three TextFields. \n The padding applies to the whole layout while the spacing is the space between the TextFields\n
TS007.TC003.items       = In the first layout padding and spacing are activated. \n In the second layout padding and spacing are deactivated .\n In the third layout padding is activated and spacing is deactivated.
TS007.TC004             = Spacing and Padding in VerticalLayout
TS007.TC004.description = There are three VerticalLayouts each contains three TextFields. \n The padding applies to the whole layout while the spacing is the space between the TextFields \n
TS007.TC004.items       = In the first layout padding is deactivated and spacing is activated. \n In the second layout padding is not activated and spacing is activated .\n In the third layout padding and spacing are deactivated

TS008 = Aspects

TS008.TC001             = @BindTooltip
TS008.TC001.description = Tests the BindTooltip annotation
TS008.TC001.items       = The tooltip should be shown as title attribute and dynamically replaced with the content of the textfield.\n HTML content should be removed \n HTML <br> tags should be converted to \\n \n Static tooltips cannot be changed
TS008.TC002             = @BindCaption
TS008.TC002.description = Tests @BindCaption
TS008.TC002.items       = The caption of the section, checkbox and button should update dynamically \nThe header line should disappear if the section caption is empty \nThe header line should reappear if the section caption is non-empty
TS008.TC003             = Section caption with PresentationModelObject
TS008.TC003.description = Tests dynamic section captions with a button created by implementing PresentationModelObject
TS008.TC003.items       = The caption should update dynamically \nHeader button should be visible even if the caption is empty
TS008.TC004             = Section caption with @SectionHeader
TS008.TC004.description = @BindCaption with
TS008.TC004.items       = The caption should update dynamically \nHeader button should be visible even if the caption is empty
TS008.TC005             = Section caption with close button
TS008.TC005.description = Tests dynamic section caption with close button
TS008.TC005.items       = The caption should update dynamically \nClosable button should be visible even if the caption is empty
TS008.TC006             = @BindVisible for PMOs
TS008.TC006.description = Test @BindVisible for PMOs
TS008.TC006.items       = The section should be able to close and hide on hide link click
TS008.TC007             = @BindIcon and @BindCaption
TS008.TC007.description = Tests the combination of @BindIcon and @BindCaption
TS008.TC007.items       = Changing icon should preserve the position of the icon\nIcon is displayed on the left with a padding for buttons and labels.\nIcons is displayed on the right with no padding for links.
TS008.TC008             = @BindStyleNames
TS008.TC008.description = Tests BindStyleNames annotation
TS008.TC008.items       = The section itself has style names that makes it blue, adds a border, and makes the font white and bold.\nThe field takes its input as style names
TS008.TC009             = @BindSuffix
TS008.TC009.description = Tests the BindSuffix annotation
TS008.TC009.items       = The first Textfield defines which value the dynamic suffix has\n The suffix of the second Textfield should update dynamically \n The suffix of the second Textfield should disappear if the suffix is empty \n The The suffix of the second Textfield should reappear if the suffix is non-empty \n The suffix of the third TextField is static
TS008.TC010             = @BindPlaceholder
TS008.TC010.description = Tests the BindPlaceholder annotation
TS008.TC010.items       = The first Textfield defines which value the dynamic placeholder has\n The placeholder of the second Textfield should update dynamically \n The placeholder of the second Textfield should disappear if the placeholder is empty \n The placeholder of the second Textfield should reappear if the placeholder is non-empty \n The placeholder of the third TextField is static
TS008.TC011             = @BindComboBoxItemStyle
TS008.TC011.description = Tests the BindComboBoxItemStyle annotation
TS008.TC011.items       = The items in the first combo box popup menu are all grey\nThe items in the second combo box popup menu are styled in different colors\nThe items in the third combo box are right aligned and blue
TS008.TC012             = @BindReadOnlyBehavior
TS008.TC012.description = Tests the BindReadOnlyBehavior annotation
TS008.TC012.items       = In the writeable section the three elements are not effected by the annotation.\n In the read-only section the first element should be disabled, the second should be writable and the third element should be visible and enabled because of INVISIBLE_IF_WRITABLE.
TS008.TC013             = @BindAutoFocus
TS008.TC013.description = Tests the BindAutoFocus annotation
TS008.TC013.items       = The TextField annotated with @BindAutoFocus is focused and highlighted
TS008.TC014             = @BindVariantNames
TS008.TC014.description = Tests the BindVariantNames annotation on grids
TS008.TC014.items       = On the first grid, no-row-border is applied to the variant names.\n The second grid is default.
TS008.TC015             = @BindLabel
TS008.TC015.description = Tests @BindLabel
TS008.TC015.items       = The labels below 'Dynamic labels' should update dynamically.\nThe first label below 'Auto type labels' should update dynamically, the second one is static.\nThe labels below 'Static labels' should be static.\nThere should not be any labels below 'No labels.'
TS008.TC016             = @BindSlot
TS008.TC016.description = Tests @BindSlot - the displayed layout is defined by a custom, reusable TypeScript file.
TS008.TC016.items       = One button is displayed on the left side.\n Two buttons are display right-aligned with a padding to the right.

TS009 = Notifications

TS009.TC001             = Text Notifications
TS009.TC001.description = Notifications containing a title and text.
TS009.TC001.items       = The notification variant (background color) is different depending on the severity\nInfo and warning notifications close automatically by default\nError notifications close only on button click\nInfo and warning notifications can be closed either by clicking the close button or automatically when the duration expires if the duration > 0\nMessage text should allow basic HTML like <b>bold</b>
TS009.TC002             = MessageList Notifications
TS009.TC002.description = Notifications containing a title and a list of messages. If the text is left is blank, the message is not created.
TS009.TC002.items       = The notification variant (background color) is dependent on the maximum severity message\nAll messages have an icon corresponding to their severity\nInfo notifications close automatically\nWarning notifications close automatically\nError notifications close only when the button is clicked\nMessage text should allow basic HTML like <b>bold</b>

TS010 = LinkkiTabLayout

TS010.TC001             = Vertical Layout
TS010.TC001.description = A LinkkiTabLayout with horizontal orientation.
TS010.TC001.items       = The tab selectors are placed above of the content
TS010.TC002             = Horizontal Layout
TS010.TC002.description = A LinkkiTabLayout with vertical orientation.
TS010.TC002.items       = The tab selectors are placed on the left of the content
TS010.TC003             = Tab visibility
TS010.TC003.description = The visibility of the tabs can be set using the checkboxes. To apply the settings, the update button has to be pressed.
TS010.TC003.items       = Tabs set invisible are hidden\nTabs set to visible are shown\nIf the current tab is set invisible, the first visible tab should be selected\nWhen all tabs are invisible, all content should be invisible\n
TS010.TC004             = AfterTabSelectedObserver
TS010.TC004.description = Component with AfterTabSelectedObserver should update the content upon tab selection.
TS010.TC004.items       = Change the value in the sheet without observer and switch to the tab with observer. The value should be updated.\nChange the value in the sheet with observer and switch to the tab without observer. The value should not be updated there.

TS011 = Dialogs

TS011.TC001             = OkCancelDialog Handlers
TS011.TC001.description = The okHandler and cancelHandler of the OkCancelDialog increase the counter when triggered.
TS011.TC001.items       = The okHandler is run once when the OK button is pressed\nThe okHandler is run once when the OK button is focused and the Enter key is pressed\nThe cancelHandler is run once when the Cancel button is pressed\nThe cancelHandler is run once when the Cancel button is focused and the Enter key is pressed\nThe cancelHandler is run once when the Escape key is pressed\nThe cancelHandler is run once when the user clicks outside the dialog
TS011.TC002             = Question and Confirmation Dialog
TS011.TC002.description = Opens a Question or Confirmation dialog with the corresponding buttons
TS011.TC002.items       = The dialogs should render basic HTML Text as content.
TS011.TC003             = OkCancelDialog Overflow
TS011.TC003.description = Clicking on the button opens a dialog with overflowing content.
TS011.TC003.items       = The caption and the buttons should not overflow. 
TS011.TC004             = Spacing in Dialog
TS011.TC004.description = Tests the between between content components in dialogs
TS011.TC004.items       = There should be a spacing between the sections.
TS011.TC005             = Label Width in Dialog
TS011.TC005.description = Tests custom label width in dialogs.
TS011.TC005.items       = The label width in the dialog to 15rem which enables the label to be shown in one line.
TS011.TC006             = Dialog Size
TS011.TC006.description = Tests setWidth and setHeight in OkCancelDialog.
TS011.TC006.items       = Custom width and height from the text fields should define the size of the dialog.
TS011.TC007             = Dialog error handler
TS011.TC007.description = Tests the dialog error handler
TS011.TC007.items       = Clicking on the button should open an exception dialog.\nAfter confirmation, the user should be navigated to the default start view and the error parameter 'errorOccured' should be set.
TS011.TC008             = Messages in Dialogs
TS011.TC008.description = Tests display of validation messages in dialogs.
TS011.TC008.items       = Setting a severity in the ComboBox should lead to display of a validation message.\nSetting the severity back to null should make the message disappear.\nLong message should break.\nIf the content must scroll, the message should stay.

TS012 = Tables

TS012.TC001             = Table with validation
TS012.TC001.description = Table to test the display of validation errors
TS012.TC001.items       = Validation error should be shown for names which do not end with index or for dates/datetimes in the past.\nValidation markers must be visible after sidebar sheet switched.
TS012.TC002             = Selectable table
TS012.TC002.description = A table with single select
TS012.TC002.items       = Double-click on table row should show notification\nSelect a row, click on "Update Comparison Values", both labels (table selection and PMO selection) should show the selected row.\nIn the visual only representation, a row can be selected, but double-clicking has no effect (solely for visual reasons)
TS012.TC003             = Columns width
TS012.TC003.description = Tests width and flexGrow in @UITableColumn
TS012.TC003.items       = Column 1 should have a width of 50px\nColumn 2 should have 3 times more excess width than column 4 and 5 (base width is somehow 100px if undefined)\nColumn 3 and column 4 should have the same width\nColumn 5 should have base width of 200px and the same amount of excess width as column 4 and 5
TS012.TC004             = Dynamic fields
TS012.TC004.description = Tests dynamic fields in tables
TS012.TC004.items       = Retention should be a text field for car type "Standard", and be a combo-box for car type "Premium"
TS012.TC005             = Table footer styling for sum
TS012.TC005.description = Tests a table with the style LinkkiApplicatonTheme.GRID_FOOTER_BOLD
TS012.TC005.items       = Footer texts should appear bold
TS012.TC006             = Table with placeholder
TS012.TC006.description = Tests table with @BindPlaceholder
TS012.TC006.items       = Table "@BindPlaceholder("No rows present.")": Table including header and footer should be hidden and replaced by placeholder text if table has no items. Placeholder text should disappear if items are added.\nTable "Inherited @BindPlaceholder": Table inherits annotation from its superclass. Table including header and footer should be hidden and replaced by placeholder text if table has no items. Placeholder text should disappear if items are added.\nTable with @BindPlaceholder(value = "", placeholderType = PlaceholderType.STATIC) annotation should hide empty table without showing any replacement text.\nTable without @BindPlaceholder annotation: Empty table including header and footer should still be shown, even if table has no items.
TS012.TC007             = Column text alignment
TS012.TC007.description = Columns with different text alignment set using @UITableColumn(textAlign = ...)
TS012.TC007.items       = DEFAULT and START should be left-aligned\r\nCENTER should be center-aligned\r\nEND should be right-aligned\r\nAlignment of footer and header should match the alignment of the column content
TS012.TC008             = Collapsible column
TS012.TC008.description = Tests different collapsible modes
TS012.TC008.items       = Only initially collapsed column should be initially collapsed
TS012.TC009             = Empty UILabel column
TS012.TC009.description = A UILabel column that contains an empty string value should not display dots in Mozilla Firefox if its width is decreased.
TS012.TC009.items       = If the width of the first column is decreased to a minimum, the dots should not appear.\nThe second column should not display dots by default.
TS012.TC010             = Sortable columns
TS012.TC010.description = Columns using @UITableColumn(sortable = true)
TS012.TC010.items       = All columns should be sortable.
TS012.TC011             = @UITableComponent
TS012.TC011.description = A table can be created within any pmo with the @UITableComponent annotation.
TS012.TC011.items       = A new person is automatically created and added asynchronously to the table after 2 seconds\nChanging to the age and likes are immediately reflected in the displayed data

TS013 = Validation

TS013.TC001             = Message table component
TS013.TC001.description = The table is created by MessageUiComponents.createMessageTable, using a binding context that is registered to the binding manager of the check box as an UI update observer.
TS013.TC001.items       = The icon of the error message is an exclamation mark on a round red background.\nThe icon of the warning message is an exclamation mark on a triangle yellow background.\nThe icon of the info message is an i on a round blue background.\nUnchecking the check box leads to validation service returning no messages, thus the messages should disappear. Checking it again should make them appear again.
TS013.TC002             = Field validation
TS013.TC002.description = Validation messages with invalid object property
TS013.TC002.items       = If any severity is selected, all input fields should show a generic validation message.\n\
                          Generic validation messages with lower severity are replaced by component specific error messages.\n\
                          The fields should be visually highlighted if message is present.\n\
                          The message should be displayed directly underneath the fields.\n\
                          Long message should wrap.\n\
                          Read-only fields should have a different style if they are invalid.\n\
                          The text field that is only interested in error messages only displays the first occurring error message and ignores other message severities.
TS013.TC003             = Components not implementing HasValidation
TS013.TC003.description = Components not implementing HasValidation are supported by linkki by setting the attributes "invalid" and "severity", analogous to the Vaadin behaviour. This allows custom styling to be applied.
TS013.TC003.items       = The attribute "invalid" should be set when a validation message is present\r\nThe attribute "severity" should be set to the selected message severity
TS013.TC004             = Converter Error
TS013.TC004.description = Invalid inputs into typed components should result in a validation message below the field.
TS013.TC004.items       = Deleting a present required value from a required integer field should result in a validation message below the field and its value should be reset to the previous value.
TS013.TC005             = Required Validation
TS013.TC005.description = Required validation with and without a binding manager
TS013.TC005.items       = Inserted a value while the input field is empty should result in the required-marker and the field to lose their red marking .\n\
                          Deleting a present required value should mark the required marker and field in red. When a validation service is used, a returned message with invalid object properties should be shown below the field.

TS014 = Tree Tables

TS014.TC001             = Person tree table
TS014.TC001.description = Tests collapsing and expanding of nodes
TS014.TC001.items       = Clicking on a row should expand/collapse and show/hide all children rows.
TS014.TC002             = League tree table
TS014.TC002.description = Tests dynamic tree table
TS014.TC002.items       = If the team of a player is changed, the player should be moved to the correct team node\nIf the position of a player is changed, the player node should be moved to the correct child node.\nClicking on a row should show a notification.
TS014.TC003             = Updating tree table
TS014.TC003.description = Tests updating the UI when removing children nodes
TS014.TC003.items       = If all children of a tree node are removed, the parent node should stay expanded. After adding another child, the child should be visible immediately.
TS014.TC004             = Treetable with placeholder
TS014.TC004.description = Tests if placeholder is being set to an empty TreeGrid
TS014.TC004.items       = If all rows are removed, a placeholders should be shown.

TS015 = AbstractPage

TS015.TC001             = Adding components to AbstractPage
TS015.TC001.description = Test adding components to a page using different methods
TS015.TC001.items       = add adds components vertically\naddHorizontally wraps components in a HorizontalLayout\naddSections behaves like addHorizontally\nCalling addSection twice adds the components vertically

TS016 = Nested Components

TS016.TC001             = Multi level nested components
TS016.TC001.description = Components can be nested within other components at multiple levels.
TS016.TC001.items       = The nested PMOs regarding Information and Address are shown properly.\nZipping code and city text fields are displayed in one row in the Address section.
TS016.TC002             = Aspects and invisible model object
TS016.TC002.description = Aspects are applied to nested components and the model object of an invisible PMO may be nullable.
TS016.TC002.items       = Nested components are initially visible.\nChecking the checkbox "Show nested component" toggles the visibility.\nInitially, the fields values should be cleared and all fields should be readonly as the model object is null.\nWith model object being null, toggling enabled state should have an effect as it is implemented in the PMO.\nClicking on the model object creation button makes the components writable. Also, fields are then filled with default values.\nNow removing the model object makes all components read-only and all values are cleared.
TS016.TC003             = Width of nested components
TS016.TC003.description = The width of nested components is calculated based on the property "width" of @UINestedComponent
TS016.TC003.items       = If no width is set, the nested components should have full width\nFor width = "50%" the nested components should have exactly half the width of its containing wrapper.\nIf width is set to the empty value (width = ""), the nested components should have the width needed by its child components.\nIf width is set to the empty value (width = "") but the nested component has a style class that sets the width, the nested components should have the width of the style class.

TS017 = Error Handling

TS017.TC001             = Error dialog
TS017.TC001.description = Uncaught exceptions will be handled by linkki automatically.
TS017.TC001.items       = A thrown exception outside a navigation event should open an error dialog.\nIn the error dialog, there should be a button to navigate to the start view.\nException message and stack trace should not be shown in production mode.
TS017.TC002             = Error page
TS017.TC002.description = Uncaught exceptions during navigation are handled by an error page.
TS017.TC002.items       = The error details shown on the error page should correspond with the button description.\nOn the error page, there should be a button to navigate to the start view.\nThe message of a MessageException should always be shown, regardless of production or development mode.\nFor all other exceptions, the message should not be shown in production mode.\nStack traces should not be shown in production mode.

TS018 = Converters

TS018.TC001             = Converters
TS018.TC001.description = Tests default converters that are registered to LinkkiConverterRegistry for fields.
TS018.TC001.items       = Date with UITextField - Example valid input for de: 12.01.1990; Example invalid input for de: 12.1.1990, 12.1.90, 120190\nGregorianCalendar with UITextField - Example valid input for de: 01.01.1990; Example invalid inputs for de: 1.1.1990, 01.01.90, 010190