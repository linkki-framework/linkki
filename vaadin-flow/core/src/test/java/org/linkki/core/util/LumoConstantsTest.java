/*
 * Copyright Faktor Zehn GmbH.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing permissions and limitations under the
 * License.
 */

package org.linkki.core.util;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import com.vaadin.flow.theme.lumo.LumoUtility;

@Deprecated(since = "2.4.1")
class LumoConstantsTest {

    /**
     * Checks that all properties present in {@link LumoUtility} are also present in
     * {@link LumoConstants} and have the same value.
     */
    @ParameterizedTest
    @MethodSource("getLumoProperties")
    void testLumoConstants_IsPropertyPresent(String subclass, String property) {
        var vaadinValue = getPropertyValue(LumoUtility.class, subclass, property);
        var linkkiValue = getPropertyValue(LumoConstants.class, subclass, property);

        assertThat(linkkiValue)
                .withFailMessage("Expected property %s.%s to be present." +
                        " Enable #generateClass and use the generated code to update %s",
                                 subclass, property, LumoConstants.class.getSimpleName())
                .isPresent()
                .withFailMessage("Expected property %s.%s to be equal to %s",
                                 subclass, property, vaadinValue.get())
                .contains(vaadinValue.get());
    }

    private Optional<String> getPropertyValue(Class<?> cls, String subclass, String property) {
        try {
            var propertyClass = Class.forName(cls.getCanonicalName() + "$" + subclass);
            var propertyField = propertyClass.getField(property);
            String value = (String)propertyField.get(null);
            return Optional.of(value);
        } catch (ClassNotFoundException | NoSuchFieldException e) {
            // field does not exist
            return Optional.empty();
        } catch (SecurityException | IllegalAccessException e) {
            throw new IllegalStateException(e);
        }
    }

    private static Stream<Arguments> getLumoProperties() {
        return Stream.of(LumoUtility.class.getDeclaredClasses())
                .flatMap(cls -> Stream.of(cls.getDeclaredFields())
                        .map(field -> Arguments.of(cls.getSimpleName(), field.getName())));
    }

    @Test
    @Disabled("Used to generate LumoConstants")
    void generateClass() {
        Map<String, List<String>> properties = new HashMap<>();
        getLumoProperties().forEach(a -> {
            var subclass = (String)a.get()[0];
            var property = (String)a.get()[1];
            properties.computeIfAbsent(subclass, s -> new ArrayList<>()).add(property);
        });
        assertThat(properties).isNotEmpty();

        System.out.println("""
                // generated by LumoConstantsTest#generateClass);
                public final class LumoConstants {

                    private LumoConstants() {
                        // prevent instantiation
                    }\
                """);

        for (String subclass : properties.keySet()) {
            System.out.printf("""

                        /** @see %s */
                        public static final class %s {

                    %s

                            private %s() {
                                // prevent instantiation
                            }
                        }
                    """,
                              LumoUtility.class.getName() + "." + subclass,
                              subclass,
                              properties.get(subclass).stream()
                                      .map(p -> generateSubclassConstant(subclass, p))
                                      .collect(Collectors.joining(System.lineSeparator())),
                              subclass);
        }

        System.out.println("}");
    }

    private String generateSubclassConstant(String subclass, String property) {
        String value = getPropertyValue(LumoUtility.class, subclass, property).get();
        return """
                        /** @see com.vaadin.flow.theme.lumo.LumoUtility.%s#%s */
                        public static final String %s = "%s";\
                """.formatted(subclass, property, property, value);
    }
}
