{
    "2.4.2": [
        {
            "extension": "revapi.differences",
            "configuration": {
                "ignore": true,
                "differences": [
                    {
                        "code": "java.method.exception.checkedAdded",
                        "exception": "java.lang.invoke.LambdaConversionException",
                        "package": "org.linkki.core.binding.dispatcher.reflection.accessor",
                        "justification": "LIN-3406: Exception is catched later to fall back to reflection API"
                    },
                    {
                        "code": "java.method.added",
                        "new": "method void org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T, I>::<init>(java.lang.Class<? extends T>, java.lang.String, java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>)",
                        "justification": "LIN-3406: Test constructor"
                    },
                    {
                        "code": "java.method.abstractMethodAdded",
                        "new": "method I org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T, I>::fallbackReflectionCall(java.lang.reflect.Method)",
                        "justification": "LIN-3406: Use reflection as fallback if method handle cannot be used"
                    },
                    {
                        "code": "java.method.removed",
                        "old": "method <I> I org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T>::getMethodAs(java.lang.Class<? extends I>)",
                        "justification": "LIN-3406: Use generic type instead of method argument"
                    },
                    {
                        "code": "java.method.added",
                        "new": "method I org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T, I>::getMethodAsFunction()",
                        "justification": "LIN-3406: Use generic type instead of method argument"
                    },
                    {
                        "code": "java.generics.formalTypeParameterAdded",
                        "old": "class org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T>",
                        "new": "class org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T, I>",
                        "typeParameter": "I",
                        "justification": "LIN-3406: Use generic type instead of method argument"
                    },
                    {
                        "regex": true,
                        "code": "java\\.method\\.added",
                        "methodName": "fallbackReflectionCall",
                        "package": "org\\.linkki\\.core\\.binding\\.dispatcher\\.reflection\\.accessor",
                        "justification": "LIN-3406: Use reflection as fallback if method handle cannot be used"
                    },
                    {
                        "code": "java.class.superTypeTypeParametersChanged",
                        "oldSuperType": "org.linkki.core.binding.dispatcher.reflection.accessor.AbstractMethod<T>",
                        "justification": "LIN-3406: Use generic type instead of method argument"
                    }
                ]
            }
        }
    ]
}
