library 'f10-jenkins-library@1.0_patches'

pipeline {
    agent any

    environment {
        PROJECT_NAME = 'linkki'
        BRANCH_NAME = "${env.GIT_LOCAL_BRANCH}"
        // make sure that the build name does not contain '_' because this will lead to unexpected Docker failures
        DOCKER_BUILD_NAME = "${BRANCH_NAME.replaceAll('_', '-')}"
        CONTAINER_RETENTION = 'permanent-on'
    }

    stages {
        stage('Pre-Build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.BRANCH_NAME}"
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 11', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 \
                        -pl "!vaadin23/doc" \
                        -Pproduction \
                        clean source:jar javadoc:jar deploy'
                }
            }
        }

        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup.sh ${DOCKER_BUILD_NAME}'

                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h3>Test Playground</h3>
                    <ul>
                        <li><a href='http://linkki-${env:DOCKER_BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin23'>Vaadin 23</a></li>
                    </ul>
                """
            }
        }

        stage('Upload Documentation') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 11', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 \
                        -pl "vaadin23/doc" \
                        deploy \
                        -Ddoc.user=doc'
                }
            }
        }

        // wait for the sample applications to be ready to run the tests
        stage('Wait for Server') {
            steps {
                waitForServer "http://linkki-${DOCKER_BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin23"
            }
        }

        stage('Tests') {
            // Run Tests only if build was successful
            when {
                expression {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            parallel {
                stage('UI Test') {
                    steps {
                        withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 11', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -f vaadin23/samples/test-playground/uitest/pom.xml test \
                                -Dmaven.test.failure.ignore=true'
                        }

                        archiveArtifacts allowEmptyArchive: true, artifacts: 'vaadin23/samples/test-playground/uitest/target/error-screenshots/*.png'
                        junit 'vaadin23/samples/test-playground/uitest/target/surefire-reports-*/*.xml'
                    }

                    environment {
                        MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-${DOCKER_BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin23'
                    }
                }

                // run the SonarQube analysis for this change
                stage('SonarQube Analysis') {
                    environment {
                        SONAR_LOGIN = credentials('sonar.login')
                    }
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            withSonarQubeEnv('SonarQube') {
                                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                                    sh 'mvn -Dsonar.projectName=${PROJECT_NAME} \
                                            -Dsonar.projectKey=${PROJECT_NAME} \
                                            -Dsonar.login=$SONAR_LOGIN \
                                            -Dsonar.branch.name=${BRANCH_NAME} \
                                            sonar:sonar'
                                }
                            }

                            rtp parserName: 'HTML', nullAction: '1', stableText: """
                                <h3>SonarQube</h3>
                                <a href='https://sonarqube.faktorzehn.de/dashboard?id=${env.PROJECT_NAME}' target='_blank'>SonarQube Analysis</a>
                            """
                        }
                    }
                }
            }
        }

        stage('Check Git Diffs') {
            steps {
                verifyNoChangedFiles()
            }
        }

        // check if the SonarQube quality gate is fulfilled
        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            unstable("SonarQube failed with status: ${qg.status}")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
            recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
            jacoco sourceInclusionPattern: '**/*.java'

            archiveArtifacts 'vaadin23/doc/target/doc/**'
        }

        regression {
            emailext to: '${REGRESSION_EMAIL_LINKKI}', mimeType: 'text/html', subject: 'Jenkins Build Failure - $PROJECT_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '14', numToKeepStr: '30'))
    }
}
