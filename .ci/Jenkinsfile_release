library 'f10-jenkins-library@1.1_patches'
library 'release-library@1.2'

import groovy.json.JsonOutput

def additionalReleaseActions() {
    // set version in uitest module to RELEASE_VERSION
    sh "mvn org.codehaus.mojo:versions-maven-plugin:2.7:set \
        -DnewVersion=${params.RELEASE_VERSION} \
        -DgenerateBackupPoms=false \
        -f vaadin-flow/samples/test-playground/uitest"
}

def additionalDevelopmentActions() {
    // set version in uitest module to DEVELOPMENT_VERSION
    sh "mvn org.codehaus.mojo:versions-maven-plugin:2.7:set \
        -DnewVersion=${params.DEVELOPMENT_VERSION} \
        -DgenerateBackupPoms=false \
        -f vaadin-flow/samples/test-playground/uitest"
}

pipeline {
   agent any

    options {
        skipDefaultCheckout true
    }

    environment {
        PROJECT_NAME = 'linkki'
        BRANCH_NAME = "${env.GIT_LOCAL_BRANCH}"
        PROJECT_ID = "${PROJECT_NAME}-${BRANCH_NAME.replaceAll(/[^A-Za-z0-9]/, '-').toLowerCase()}"
        NETWORK_NAME = "network-${PROJECT_ID}"
        DEPLOYMENT_NAME = "linkki-sample-test-playground-vaadin-flow"
        DEPLOYMENT_HOST = "${PROJECT_ID}.dockerhost.i.faktorzehn.de"
        DEPLOYMENT_URL = "http://${DEPLOYMENT_HOST}/${DEPLOYMENT_NAME}"
    }

    stages {
        stage('Prepare Release') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 21', publisherStrategy: 'EXPLICIT') {
                    script {
                        prepareRelease.withAdditionalActions(
                            this.&additionalReleaseActions,
                            this.&additionalDevelopmentActions
                        )
                    }
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -P production clean javadoc:jar source:jar install'
                }

                junit "**/target/surefire-reports/*.xml"
                recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
                jacoco sourceInclusionPattern: '**/*.java'
            }
        }

        stage('Dependency-Check') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', publisherStrategy: 'EXPLICIT') {
                    dependencyCheck version: '24.1'
                }
            }
        }

        stage('Check Git Diffs') {
            steps {
                verifyNoChangedFiles()
            }
        }

        stage('Remove Docker Network') {
            steps {
                deleteDockerNetwork "${NETWORK_NAME}"
            }
        }

        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup.sh ${PROJECT_ID}'

                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h3>Sample Deployments</h3>
                    <ul>
                        <li><a href='${DEPLOYMENT_URL}' target="_blank">Playground</a></li>
                    </ul>
                """
            }
        }

        // wait for the sample applications to be ready to run the tests
        stage('Wait for Server') {
            steps {
                waitForServer "${DEPLOYMENT_URL}"
            }
        }

        stage('UI Test') {
            // Run Tests only if build was successful
            when {
                expression {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }

            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -f vaadin-flow/samples/test-playground/uitest/pom.xml test \
                        -Dmaven.test.failure.ignore=true -Dsurefire.rerunFailingTestsCount=3'
                }

                archiveArtifacts allowEmptyArchive: true, artifacts: 'vaadin-flow/samples/test-playground/uitest/target/error-screenshots/*.png'
                junit 'vaadin-flow/samples/test-playground/uitest/target/surefire-reports-*/*.xml'
            }

            environment {
                MAVEN_OPTS = '-Xmx2g -Dtest.hostname=${DEPLOYMENT_HOST} -Dtest.port=80 -Dtest.path=${DEPLOYMENT_NAME}'
            }
        }

        stage('Upload Release') {
            steps {
                script {
                    uploadRelease() {
                        withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', publisherStrategy: 'EXPLICIT') {
                            // only publish final releases (no rcs & milestones) on maven central
                            if(params.RELEASE_VERSION ==~ /(\d+\.)+\d+/) {
                                sh 'mvn javadoc:jar source:jar deploy -PMavenCentralRelease -Ddoc.user=doc -Dmaven.test.skip=true | tee target/deploy.log'
                                script {
                                    withCredentials([string(credentialsId: 'sonatype.central.token', variable: 'SONATYPE_CREDENTIALS')]) {
                                        DeploymentId = sh (
                                            script: 'grep -P -o  -i "(?<=Deployment )[a-f0-9-]+(?= has been validated)" target/deploy.log',
                                            returnStdout: true
                                        ).trim()
                                        rtp parserName: 'HTML', nullAction: '1', stableText: """
                                            <h2>Deployment</h2>
                                            <script>
                                            function copyToClipboard() {
                                              navigator.clipboard.writeText("${DeploymentId}");
                                            }
                                            </script>
                                            Deployment-ID: ${DeploymentId}&nbsp;<button onclick="copyToClipboard()">&#x1f4cb;</button><br />
                                            &#x2705;: <a href='https://druiden-ci.faktorzehn.dev/view/linkki/job/linkki_ReleaseOnMavenCentral/build'>Release on Maven Central</a><br />
                                            &#x274C;: <a href='https://druiden-ci.faktorzehn.dev/view/linkki/job/linkki_DropOnMavenCentral/build'>Drop on Maven Central</a> - ggf. Nexus und update.faktorzehn.org von Admin aufr&auml;umen lassen
                                          """
                                        responseStatus = sh (
                                            script: 'curl -X POST https://central.sonatype.com/api/v1/publisher/status?id=' + DeploymentId + ' \
                                                        -H "accept: application/json" -H "Authorization: Bearer $SONATYPE_CREDENTIALS" -d "" --fail',
                                            returnStdout: true
                                        ).trim()

                                        props = readJSON text: "${responseStatus}"

                                        try {
                                            // publish only works on VALIDATED
                                            assert props.deploymentState == 'VALIDATED'

                                        } catch(Throwable errStatus) {
                                            rtp parserName: 'HTML', nullAction: '1', stableText: """
                                                <h2>Status of ${DEPLOYMENT_ID}</h2>
                                                <span style="background:#ff9999;padding: 1em;font-weight: bold;">deploymentState is not VALIDATED but ${props.deploymentState}</span>
                                            """
                                            error("deploymentState is not VALIDATED but ${props.deploymentState}")
                                        }
                                        formatted = JsonOutput.prettyPrint(responseStatus).replace(" ", "&nbsp;").replace("\n","<br />\n")
                                        rtp parserName: 'HTML', nullAction: '1', stableText: """
                                                <h2>Deployment Status:</h2>
                                                <span style="font-family: monospace;">${formatted}</span>
                                            """
                                    }
                                }
                            } else {
                                sh 'mvn javadoc:jar source:jar deploy -Ddoc.user=doc'
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        unsuccessful {
            emailext to: env.TEAM_EMAIL, mimeType: 'text/html', subject: 'Jenkins Release Failure - $JOB_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }
}