library 'f10-jenkins-library@master'

pipeline {
   agent any

    options {
        skipDefaultCheckout true
    }

    environment {
        PROJECT_NAME = 'linkki'
        BUILD_NAME = "${params.RELEASE_VERSION}"
        PROJECT_ID = "${PROJECT_NAME}-${BUILD_NAME}"
        DOCKER_HOST = "ssh://docker@dockerhost.i.faktorzehn.de"
        CONTAINER_RETENTION = 'keep'
    }

    stages {
        stage('Prepare Release') {
            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                    prepareRelease additionalModules: ['vaadin8/samples/test-playground/uitest', 'vaadin14/samples/test-playground/uitest']
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 -P production clean javadoc:jar source:jar install'
                }

                junit "**/target/surefire-reports/*.xml"
                recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
                jacoco sourceInclusionPattern: '**/*.java'
            }
        }

        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup.sh ${BUILD_NAME}'

                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h3>Test Playground</h3>
                    <ul>
                        <li><a href='http://linkki-vaadin8-${env:BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'>Vaadin 8</a></li>
                        <li><a href='http://linkki-vaadin14-${env:BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin14'>Vaadin 14</a></li>
                    </ul>
                """
            }
        }

        // wait for the sample applications to be ready to run the tests
        stage('Wait for Server') {
            steps {
                // wait with the ui tests until the server is ready
                timeout(time: 3, unit: 'MINUTES') {
                    waitUntil {
                        script {
                            try {
                                sh 'curl --fail http://linkki-vaadin8-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'
                                sh 'curl --fail http://linkki-vaadin14-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin14'
                                return true
                            } catch (Exception e) {
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('UI Test Vaadin 8') {
            when {
                expression {
                    currentBuild.currentResult == "SUCCESS"
                }
            }

            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -f vaadin8/samples/test-playground/uitest/pom.xml test'
                }
            }

            environment {
                MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-vaadin8-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin8'
            }
        }

        stage('UI Test Vaadin 14') {
            when {
                expression {
                    currentBuild.currentResult == "SUCCESS"
                }
            }

            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -f vaadin14/samples/test-playground/uitest/pom.xml test'
                }
            }

            environment {
                MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-vaadin14-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin14'
            }
        }

        // run the SonarQube analysis for this change
        stage('SonarQube Analysis') {
            environment {
                SONAR_LOGIN = credentials('sonar.login')
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withSonarQubeEnv('SonarQube') {
                        withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -Dsonar.projectName=${PROJECT_NAME} -Dsonar.projectKey=${PROJECT_NAME} -Dsonar.branch.name=${PROJECT_ID} -Dsonar.login=$SONAR_LOGIN sonar:sonar'
                        }
                    }

                    rtp parserName: 'HTML', nullAction: '1', stableText: """
                        <h3>SonarQube</h3>
                        <a href='https://sonarqube.faktorzehn.de/dashboard?id=${env.PROJECT_NAME}&branch=${env.PROJECT_ID}' target='_blank'>https://sonarqube.faktorzehn.de/dashboard?id=${env.PROJECT_NAME}&branch=${env.PROJECT_ID}</a>
                    """
                }
            }
        }

        // check if the SonarQube quality gate is fulfilled
        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // set build to unstable if quality gate fails
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Maven Deployment') {
            steps {
                script {
                    withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                        // only publish normal releases (no rcs & milestones) on maven central
                        if(params.RELEASE_VERSION ==~ /(\d+\.)+\d+/) {
                            uploadRelease commands: ['mvn javadoc:jar source:jar deploy -PMavenCentralRelease -Ddoc.user=doc']
                        } else {
                            uploadRelease commands: ['mvn javadoc:jar source:jar deploy -Ddoc.user=doc']
                        }
                    }
                }
            }
        }
    }

    post {
        unsuccessful {
            emailext to: env.TEAM_EMAIL, mimeType: 'text/html', subject: 'Jenkins Release Failure - $JOB_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }
}
