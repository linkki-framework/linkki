pipeline {
    agent any

    options {
        skipDefaultCheckout true
    }
    
    environment {
        BUILD_NAME = "${params.RELEASE_VERSION}"
        DOCKER_HOST = "ssh://docker@dockerhost.i.faktorzehn.de"
        CONTAINER_RETENTION = 'keep'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    currentBuild.displayName = "Release ${params.RELEASE_VERSION} (${params.BRANCH})"

                    assert params.RELEASE_VERSION ==~ /(\d+\.)+\d+(-rc\d\d|-m\d\d|-a\d{8}-\d\d|-[A-Z]+)?/
                    assert params.DEVELOPMENT_VERSION ==~ /(\d+\.)+\d+/

                    def scmVars = checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.BRANCH}"]],
                        extensions: [[$class: 'WipeWorkspace'], [$class: 'LocalBranch']],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])

                    LOCAL_BRANCH = scmVars.GIT_LOCAL_BRANCH
                }
            }
        }

        stage('Set versions') {
            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8') {
                    sh "mvn versions:set -DnewVersion=${params.RELEASE_VERSION} -DgenerateBackupPoms=false"
                    sh "mvn versions:set -DnewVersion=${params.RELEASE_VERSION} -DgenerateBackupPoms=false -f vaadin8/samples/test-playground/uitest/pom.xml"
                }
                sh "git add . && git commit -m '[release] prepare release ${params.RELEASE_VERSION}' && git tag -a -m ${params.RELEASE_VERSION} ${params.RELEASE_VERSION}"

                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8') {
                    sh "mvn versions:set -DnewVersion=${params.DEVELOPMENT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false"
                    sh "mvn versions:set -DnewVersion=${params.DEVELOPMENT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false -f vaadin8/samples/test-playground/uitest/pom.xml"
                }
                sh "git add . && git commit -m '[release] prepare for next development iteration'"

                sh "git checkout ${LOCAL_BRANCH}~1"
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 -Pproduction clean javadoc:jar source:jar install'
                }

                junit "**/target/surefire-reports/*.xml"
                recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
                jacoco sourceInclusionPattern: '**/*.java'
            }

            post {
                unsuccessful {
                    script {
                        // Stop even if build is unstable
                        error 'Build failure'
                    }
                }
            }
        }

        // deploy all sample applications that are necessary for the ui tests
        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup-test.sh ${BUILD_NAME}'
            }
        }

        // wait for the sample applications to be ready to run the ui tests
        stage('Wait for Server') {
            steps {
                // wait with the ui tests until the server is ready
                // since the vaadin8 tests are run first we check if linkki-sample-test-playground-vaadin8 is ready
                // and assume that the vaadin14 environment will be available afterwards
                timeout(time: 3, unit: 'MINUTES') {
                    waitUntil {
                        script {
                            try {
                                sh 'curl --fail http://linkki-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8/main'
                                return true
                            } catch (Exception e) {
                                return false
                            }
                        }
                    }
                }
            }
        }

        // parallel run of UI tests, SonarQube analysis and the deployment 
        // of all other sample applications
        stage('UI Test and SonarQube Analysis') {
            parallel {

                // run all ui tests against the deployed sample application(s)
                stage('UI Test') {
                    when {
                        expression {
                            currentBuild.currentResult == "SUCCESS"
                        }
                    }

                    steps {
                        withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -f vaadin8/samples/test-playground/uitest/pom.xml test'
                            sh 'mvn -f vaadin14/samples/test-playground/uitest/pom.xml test'
                        }
                    }

                    environment {
                        MAVEN_OPTS = "-Xmx2g -Dtest.hostname=linkki-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80"
                    }
                    
                    post {
                        unsuccessful {
                            script {
                                // Stop even if build is unstable
                                error 'UI-Test failure'
                            }
                        }
                    }
                }

                // run the SonarQube analysis for this change
                stage('SonarQube Analysis') {
                    environment {
                        SONAR_LOGIN = credentials('sonar.login')
                    }
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                                sh 'mvn -Dsonar.projectName=linkki-$BUILD_NAME -Dsonar.projectKey=linkki-$BUILD_NAME -Dsonar.login=$SONAR_LOGIN sonar:sonar'
                            }
                        }

                        rtp parserName: 'HTML', nullAction: '1', stableText: '''
                            <h3>SonarQube</h3>
                            <a href="https://sonarqube.faktorzehn.de/dashboard?id=linkki-${ENV:BUILD_NAME}" target="_blank">https://sonarqube.faktorzehn.de/dashboard?id=linkki-${ENV:BUILD_NAME}</a>
                        '''
                    }
                    post {
                        unsuccessful {
                            script {
                                error 'Sonar analysis failure'
                            }
                        }
                    }
                }

                // deploy all other sample applications to the dockerhost
                stage('Docker Deployment') {
                    steps {
                        sh 'bash -x .ci/docker_setup.sh ${BUILD_NAME}'
                        
                        rtp parserName: 'HTML', nullAction: '1', stableText: """
                            <h3>Vaadin 8 samples</h3>
                            <ul>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-binding-vaadin8">binding sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-messages-vaadin8">messages sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-dynamic-fields-vaadin8">dynamic fields sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-custom-layout-vaadin8">custom layout sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-tree-table-vaadin8">tree table sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-application-vaadin8/main">application sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-getting-started-vaadin8">getting started</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8/main">test playground</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-ips-vaadin8">IPS sample</a></li>
                            </ul>
                            <br>
                            <h3>Vaadin 14 samples</h3>
                            <ul>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-tree-table-vaadin14">tree table sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-application-vaadin14">application sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-getting-started-vaadin14">getting started</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin14">test playground</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-binding-vaadin14">binding sample</a></li>
                                <li><a href="http://linkki-${env.BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-ips-vaadin14">IPS sample</a></li>
                            </ul>
                        """
                    }
                }

            } // end parallel
        } // end stage 'UI Test and SonarQube Analysis'

        // check if the SonarQube quality gate is fulfilled
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // fail the build if quality gate fails
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Maven Deployment') {
            steps {
                script {
                    withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', publisherStrategy: 'EXPLICIT') {
                        // only publish normal releases (no rcs & milestones) on maven central
                        if(params.RELEASE_VERSION ==~ /(\d+\.)+\d+/) {
                            sh 'mvn javadoc:jar source:jar deploy -PMavenCentralRelease -Ddoc.user=doc'
                        } else {
                            sh 'mvn javadoc:jar source:jar deploy -Ddoc.user=doc'
                        }
                    }
                }
            }
        }

        stage('git push') {
            steps {
                sh "git push origin ${LOCAL_BRANCH} --follow-tags"
            }
        }
    }

    post {
        unsuccessful {
            emailext to: env.TEAM_EMAIL, mimeType: 'text/html', subject: 'Jenkins Release Failure - $JOB_NAME', body: '''
                <img src="https://jenkins.io/images/logos/fire/fire.png" style="max-width: 300px;" alt="Jenkins is not happy about it ...">
                <br>
                $BUILD_URL
            '''
        }
    }
}
