library 'f10-jenkins-library@1.1_patches'

pipeline {
    agent any

    environment {
        PROJECT_NAME = 'linkki'
        BRANCH_NAME = "${env.GERRIT_BRANCH}"
        BUILD_NAME = "${env.GERRIT_CHANGE_NUMBER}"
        MAVEN_DEFAULT_REPO = "${env.HOME}/.m2/repository"
        MAVEN_REPOSITORY = "${env.WORKSPACE}/.repository"
        DEPLOYMENT_NAME = "linkki-sample-test-playground-vaadin-flow"
        DEPLOYMENT_HOST = "linkki-${BUILD_NAME}.dockerhost.i.faktorzehn.de"
        DEPLOYMENT_URL = "http://${DEPLOYMENT_HOST}/${DEPLOYMENT_NAME}"
    }

    stages {
        stage('Pre-Build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.BRANCH_NAME}.${env.BUILD_NAME}"
                }

                preBuildSteps()

                // Setup local repository
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_DEFAULT_REPO}', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 4 -P production org.apache.maven.plugins:maven-dependency-plugin:3.3.0:go-offline -DincludeScope=compile'
                    sh 'cp -r ${MAVEN_DEFAULT_REPO} ${MAVEN_REPOSITORY}'
                }

                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT') {
                    dependsOn(credentials: 'gerrit_rest') {}
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT', options: [artifactsPublisher()]) {
                    sh 'mvn -U -T 6 \
                        clean install javadoc:javadoc \
                        -Pproduction \
                        -Dmaven.test.failure.ignore=true \
                        -Drevapi.skip'
                }
            }
        }

        stage('UI Test and Checks') {
            when {
                expression {
                    return currentBuild.currentResult != "FAILURE"
                }
            }

            parallel {
                stage('Check API') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT') {
                                sh 'mvn -T 6 -pl "!linkki-codeanalysis" validate org.revapi:revapi-maven-plugin:check'
                            }
                        }
                    }
                }

                stage('Faktor-IPS build') {
                    steps {
                        withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -pl org.linkki-framework:linkki-ips-vaadin-flow -Dmaven.repo.local="${MAVEN_REPOSITORY}" faktorips:faktorips-clean faktorips:faktorips-build'
                        }
                    }
                }

                stage('UI Test') {
                    stages {
                        stage('Docker Deployment') {
                            steps {
                                sh 'bash -x .ci/docker_setup.sh ${BUILD_NAME}'

                                rtp parserName: 'HTML', nullAction: '1', stableText: """
                                    <h3>Test Playground</h3>
                                    <ul>
                                        <li><a href='${DEPLOYMENT_URL}'>Vaadin Flow</a></li>
                                    </ul>
                                """
                            }
                        }

                        stage('Wait for Server') {
                            steps {
                                waitForServer "${DEPLOYMENT_URL}"
                            }
                        }

                        stage('UI Test') {
                            steps {
                                withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT') {
                                    sh 'mvn -f vaadin-flow/samples/test-playground/uitest/pom.xml test \
                                        -Dmaven.test.failure.ignore=true -Dsurefire.rerunFailingTestsCount=3'
                                }

                                archiveArtifacts allowEmptyArchive: true, artifacts: 'vaadin-flow/samples/test-playground/uitest/target/error-screenshots/*.png'
                                junit 'vaadin-flow/samples/test-playground/uitest/target/surefire-reports-*/*.xml'
                            }

                            environment {
                                MAVEN_OPTS = '-Xmx2g -Dtest.hostname=${DEPLOYMENT_HOST} -Dtest.port=80 -Dtest.path=${DEPLOYMENT_NAME}'
                            }
                        }
                    }
                }

                stage('SonarQube Analysis') {
                    stages {
                        stage('Analysis') {
                            environment {
                                SONAR_LOGIN = credentials('sonar.login')
                            }
                            steps {
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    withSonarQubeEnv('SonarQube') {
                                        withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', mavenLocalRepo: '${MAVEN_REPOSITORY}', publisherStrategy: 'EXPLICIT') {
                                            sh 'mvn -Dsonar.projectName=${PROJECT_NAME} \
                                                    -Dsonar.projectKey=${PROJECT_NAME} \
                                                    -Dsonar.pullrequest.key=${GERRIT_CHANGE_NUMBER} \
                                                    -Dsonar.pullrequest.branch=${GERRIT_REFSPEC} \
                                                    -Dsonar.pullrequest.base=origin/${BRANCH_NAME} \
                                                    -Dsonar.login=$SONAR_LOGIN \
                                                    sonar:sonar'
                                        }
                                    }

                                    rtp parserName: 'HTML', nullAction: '1', stableText: """
                                        <h3>SonarQube</h3>
                                        <a href='https://sonarqube.faktorzehn.de/dashboard?id=${env.PROJECT_NAME}&pullRequest=${env.GERRIT_CHANGE_NUMBER}' target='_blank'>SonarQube Analysis</a>
                                    """
                                }
                            }
                        }
                        stage('Quality Gate') {
                            steps {
                                timeout(time: 1, unit: 'HOURS') {
                                    script {
                                        def qg = waitForQualityGate()
                                        if (qg.status != 'OK') {
                                            unstable("SonarQube failed with status: ${qg.status}")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Dependency-Check') {
                    steps {
                        withMaven(maven: 'maven 3.9', jdk: 'OpenJDK 17', publisherStrategy: 'EXPLICIT') {
                            dependencyCheck version: '23.6'
                        }
                    }
                }
            }
        }

        stage('Check Git Diffs') {
            steps {
                verifyNoChangedFiles()
            }
        }

        stage('Collect Results') {
            steps {
                junit '**/target/surefire-reports/*.xml'
                recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
                jacoco sourceInclusionPattern: '**/*.java'
                archiveArtifacts 'vaadin-flow/doc/target/doc/**'
            }
        }
    }


    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '30'))
    }
}
