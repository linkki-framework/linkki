library 'f10-jenkins-library@master'

pipeline {
    agent any

    environment {
        PROJECT_NAME = 'linkki'
        BUILD_NAME = "${env.GERRIT_CHANGE_NUMBER}"
        PROJECT_ID = "${PROJECT_NAME}-${BUILD_NAME}"
        DOCKER_HOST = "ssh://docker@dockerhost.i.faktorzehn.de"
        MAVEN_OPTS = '-Xmx768m'
    }

    stages {
        stage('Pre-Build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.BUILD_NAME}"
                }

                preBuildSteps()
                verifyChangelog file: 'vaadin8/doc/src/main/jbake/content/99_releasenotes/88_1_5_0.adoc'
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 11', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 -Pproduction -Djade.runExternalLinkTests=false clean install javadoc:jar'
                }
            }
        }

        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup.sh ${BUILD_NAME}'

                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h3>Test Playground</h3>
                    <ul>
                        <li><a href='http://linkki-vaadin8-${env:BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'>Vaadin 8</a></li>
                        <li><a href='http://linkki-vaadin14-${env:BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin14'>Vaadin 14</a></li>
                    </ul>
                """
            }
        }

        // wait for the sample applications to be ready to run the tests
        stage('Wait for Server') {
            steps {
                // wait with the ui tests until the server is ready
                timeout(time: 3, unit: 'MINUTES') {
                    waitUntil {
                        script {
                            try {
                                sh 'curl --fail http://linkki-vaadin8-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'
                                sh 'curl --fail http://linkki-vaadin14-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin14'
                                return true
                            } catch (Exception e) {
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('Tests') {
            // Run Tests only if build was successful
            when {
                expression {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            parallel {
                stage('UI Test Vaadin 8') {
                    steps {
                        withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 11', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -f vaadin8/samples/test-playground/uitest/pom.xml test'
                        }
                    }
        
                    environment {
                        MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-vaadin8-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin8'
                    }
                }
        
                stage('UI Test Vaadin 14') {
                    steps {
                        withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 11', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                            sh 'mvn -f vaadin14/samples/test-playground/uitest/pom.xml test'
                        }
                    }
        
                    environment {
                        MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-vaadin14-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin14'
                    }
                }
        
                // run the SonarQube analysis for this change
                stage('SonarQube Analysis') {
                    environment {
                        SONAR_LOGIN = credentials('sonar.login')
                    }
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            withSonarQubeEnv('SonarQube') {
                                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 11', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                                    sh 'mvn -Dsonar.projectName=${PROJECT_NAME} \
                                            -Dsonar.projectKey=${PROJECT_NAME} \
                                            -Dsonar.pullrequest.key=${GERRIT_CHANGE_NUMBER} \
                                            -Dsonar.pullrequest.branch=${GERRIT_REFSPEC} \
                                            -Dsonar.pullrequest.base=${GERRIT_BRANCH} \
                                            -Dsonar.login=$SONAR_LOGIN \
                                            sonar:sonar'
                                }
                            }
        
                            rtp parserName: 'HTML', nullAction: '1', stableText: """
                                <h3>SonarQube</h3>
                                <a href='https://sonarqube.faktorzehn.de/dashboard?id=${env.PROJECT_NAME}&pullRequest=${env.GERRIT_CHANGE_NUMBER}' target='_blank'>SonarQube Analysis</a>
                            """
                        }
                    }
                }
            }
        }
        // check if the SonarQube quality gate is fulfilled
        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // set build to unstable if quality gate fails
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
            recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
            jacoco sourceInclusionPattern: '**/*.java'

            archiveArtifacts 'vaadin8/doc/target/linkki-core-documentation*/**/*.*, vaadin8/samples/test-playground/uitest/target/uitest/*.png, vaadin14/doc/target/linkki-core-documentation*/**/*.*, vaadin14/samples/test-playground/uitest/target/uitest/*.png'
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '30'))
    }
}