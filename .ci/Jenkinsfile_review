pipeline {
    agent any

    environment {
        BUILD_NAME = "${env.GERRIT_CHANGE_NUMBER}"
        DOCKER_HOST = "ssh://docker@dockerhost.i.faktorzehn.de"
    }

    stages {

        stage('Build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}.${env.BUILD_NAME}"
                }

                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -U -T 6 -Djade.runExternalLinkTests=false clean install javadoc:jar'
                    sh 'mvn -f vaadin8/samples/test-playground/uitest/pom.xml clean compile'
                }
            }

            environment {
                MAVEN_OPTS = '-Xmx768m'
            }
        }

        // deploy all sample applications that are necessary for the ui tests
        stage('Docker Deployment') {
            steps {
                sh 'bash -x .ci/docker_setup.sh ${BUILD_NAME}'

                rtp parserName: 'HTML', nullAction: '1', stableText: """
                    <h3>Vaadin 8 samples</h3>
                    <ul>
                        <li><a href='http://linkki-${env:BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'>test playground</a></li>
                    </ul>
                """
            }
        }
        
        // wait for the sample applications to be ready to run the tests
        stage('Wait for Server') {
            steps {
                // wait with the ui tests until the server is ready
                timeout(time: 3, unit: 'MINUTES') {
                    waitUntil {
                        script {
                            try {
                                sh 'curl --fail http://linkki-${BUILD_NAME}.dockerhost.i.faktorzehn.de/linkki-sample-test-playground-vaadin8'
                                return true
                            } catch (Exception e) {
                                return false
                            }
                        }
                    }
                }
            }
        }

        stage('UI Test') {
            when {
                expression {
                    currentBuild.currentResult == "SUCCESS"
                }
            }

            steps {
                withMaven(maven: 'maven 3.5', jdk: 'OpenJDK 8', mavenLocalRepo: '.repository', publisherStrategy: 'EXPLICIT') {
                    sh 'mvn -f vaadin8/samples/test-playground/uitest/pom.xml test'
                }
            }

            environment {
                MAVEN_OPTS = '-Xmx2g -Dtest.hostname=linkki-${BUILD_NAME}.dockerhost.i.faktorzehn.de -Dtest.port=80 -Dtest.path=linkki-sample-test-playground-vaadin8'
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
            recordIssues enabledForFailure: true, qualityGates: [[threshold: 1, type: 'NEW', unstable: true]], tools: [java(), javaDoc(), spotBugs(), checkStyle()]
            jacoco sourceInclusionPattern: '**/*.java'

            archiveArtifacts 'vaadin8/doc/target/linkki-core-documentation*/**/*.*, vaadin8/samples/test-playground/uitest/target/uitest/*.png, vaadin8/samples/test-playground/uitest/target/uitest/*.html'
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '30'))
    }
}