
TS001 = Basic Elements Layout Behavior

TS001.TC001             = @UISection
TS001.TC001.description = Tests the behavior of all basic UI elements in an @UISection with different section layouts
TS001.TC001.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nSectionLayout.FORM (default): Components should be displayed stacked in a column. All elements, including labels, links, check boxes and buttons have labels. All labels should be displayed in front of the component\nSectionLayout.HORIZONTAL: Components should be displayed next to each other in a row. Labels, links, check boxes and buttons do not have labels. All labels should be displayed on top of the component\nSectionLayout.VERTICAL: Components should be displayed stacked in a column. Labels, links, check boxes and buttons do not have labels. All labels should be displayed on top of the component.
TS001.TC002             = @UIFormSection
TS001.TC002.description = Tests the behavior of all basic UI elements in an @UIFormSection
TS001.TC002.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nAll elements, including labels, links, check boxes and buttons have labels\nSetting a custom width for labels in FormLayout
TS001.TC003             = @UIHorizontalLayout
TS001.TC003.description = Tests the behavior of all basic UI elements in an @UIHorizontalLayout
TS001.TC003.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC004             = @UIVerticalLayout
TS001.TC004.description = Tests the behavior of all basic UI elements in an @UIVerticalLayout
TS001.TC004.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC005             = @UIFormLayout
TS001.TC005.description = Tests the behavior of all basic UI elements in an @UIFormLayout
TS001.TC005.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels
TS001.TC006             = @UICssLayout
TS001.TC006.description = Tests the behavior of all basic UI elements in an @UICssLayout
TS001.TC006.items       = Simple model binding\nSetting the components to in/visible, required, read-only\nLabels, links, check boxes and buttons do not have labels

TS002 = Section Component

TS002.TC001             = @SectionHeader
TS002.TC001.description = Tests creation of header components using @SectionHeader
TS002.TC001.items       = Buttons should be created in section header.\nText field without @SectionHeader annotation should not be in the section header even if the position is inbetween the section header components.
TS002.TC002             = GridSection layout
TS002.TC002.description = Tests the layout of GridSection
TS002.TC002.items       = If vertical space run out, only the grid should scroll.
TS002.TC003             = @UISection layouts
TS002.TC003.description = Tests component widths in different layouts
TS002.TC003.items       = SectionLayout.FORM (default): @UITextField and @UITextArea should have a default width of 100%. @UIIntegerField should NOT have a default of 100%. Labels are shown on the left of the component.\nSectionLayout.HORIZONTAL: @UITextField, @UITextArea and @UIIntegerField should have a default width of 100%. Labels are shown on top of the component.\nSectionLayout.VERTICAL: @UITextField and @UITextArea should have a default width of 100%. @UIIntegerField should NOT have a default of 100%. Labels are shown on top of the component.
TS002.TC004             = Section component header
TS002.TC004.description = Tests behavior of the header components in a LinkkiSection
TS002.TC004.items       = Closable section should show close toggle, not closable section should not show close toggle.\r\nCaption and header components should be vertically center aligned (visual check).\r\nHeader of a not closable section without caption and header components should take up no space.\r\nCalling addHeaderButton should add buttons to the left, between the caption and the close toggle. Calling addHeaderComponent should add components to the right, between the caption and the close toggle. This should result in [button 2, button 1, combo box, check box, close toggle].
TS002.TC005             = Multi columns
TS002.TC005.description = Tests @UIFormSection multi columns
TS002.TC005.items       = Components should be displayed in two columns, ordered row wise.\nThe tab order should be row wise.

TS003 = Localization

TS003.TC001             = Elements Localization
TS003.TC001.description = Tests the localization of basic element
TS003.TC001.items       = Localized section title\nLocalized element labels\nLocalized formats (Double, Decimal, Date)\nLocalized button caption

TS004 = IPS

TS004.TC001             = linkki With Faktor-IPS Model
TS004.TC001.description = IpsPropertyDispatcher Label Binding
TS004.TC001.items       = The label of the Textfield is loaded from the IPS model object documentation
TS004.TC002             = @UIDecimalField
TS004.TC002.description = Tests the @UIDecimalField behaviors with
TS004.TC002.items       = Default format\nNo decimal places\nThousands separator\nRange checks with error messages
TS004.TC003             = IpsDispatcher on required
TS004.TC003.description = Checks that the IpsPropertyDispatcher uses the ValueSet information to derive the required state.
TS004.TC003.items       = The required marker must be visible only at the first TextField.
TS004.TC004             = IpsDispatcher on visibility
TS004.TC004.description = Checks that the IpsPropertyDispatcher uses the ValueSet information to derive the visible state.
TS004.TC004.items       = There should be one TextField and one Combobox visible. Another Combobox between them must not be visible.
TS004.TC005             = IpsPropertyDispatcher on Enabled
TS004.TC005.description = Checks that the IpsDispatcher uses the ValueSet information to derive the enabled state.
TS004.TC005.items       = The ValueSet of the first control is not empty and therefore it must be enabled.\nThe ValueSet of the second control is empty and therefore it must be disabled.\nThe ValueSet of the last control is empty but the enabled behavior is dynamically set to enabled.
TS004.TC006             = Decimal as @UILabel
TS004.TC006.description = Tests @UILabel with Decimal value
TS004.TC006.items       = Decimal should be correctly displayed as a @UILabel, using the default format.

TS005 = Components

TS005.TC001             = @UILabel
TS005.TC001.description = Components created with @UILabel
TS005.TC001.items       = It should be possible to enable HTML content.\nIt should be possible to ignore HTML content.\nUsing BigDecimal as return value should render without exception.\nLocalDate as return value should be shown using registered converter (dd-MM-yyyy in DE).\nLocalDateTime as return value should be shown using registered converter (dd-MM-yyyy hh:mm in DE).\nEnum as return value should be shown using literal name by default.\nEnum with getName() as return value should be shown using getName() by default.\nIn tables: It should be able to show HTML content.\nIn tables: Long labels should break at white spaces.\nIn tables: It should be possible to make the label right aligned.
TS005.TC002             = @UIIntegerField
TS005.TC002.description = Components created with @UIIntegerField
TS005.TC002.items       = Field starts empty if Integer is used\nField starts with 0 if int is used
TS005.TC003             = @UIDoubleField
TS005.TC003.description = Components created with @UIDoubleField
TS005.TC003.items       = Field starts empty if Double is used\nField starts with 0.00 if double is used
TS005.TC004             = @UITextArea
TS005.TC004.description = Component created with @UITextArea
TS005.TC004.items       = Field has a size of 5 em
TS005.TC005             = @UITextField
TS005.TC005.description = Component created with @UITextField
TS005.TC005.items       = A vaadin text field created with default values.
TS005.TC006             = @UIDateField
TS005.TC006.description = Component created with @UIDateField
TS005.TC006.items       = The calendar popup should not open by default\nWhen entering a date and pressing "Tab", the focus should move on to the next component if the calendar popup is not opened.
TS005.TC007             = @UIComboBox
TS005.TC007.description = Components created with @UIComboBox
TS005.TC007.items       = The combo box "With null" can be cleared after selecting a value
TS005.TC008             = @UIRadioButtons
TS005.TC008.description = Components created with @UIRadioButtons
TS005.TC008.items       = The radio buttons use the caption provider\nThe radio buttons "With null" have a "None" item, which is selected by default\nThe radio buttons "Without null" do not have a "None" item, nothing is selected by default
TS005.TC009             = @UILink
TS005.TC009.description = Component created with @UILink
TS005.TC009.items       = The link text updates when "Link Caption" is changed\nThe link href updates when "Link Address" is changed\nThe link icon updates when "Link Icon" is changed\nThe link target is _blank
TS005.TC010             = @UIButton
TS005.TC010.description = Components created with @UIButton
TS005.TC010.items       = Using Button Variants primary and tertiary\nWhen typing in the text field, hitting 'Enter' should submit the value and trigger the button.\nThe Shortcut Key Events on 'Enter' should not occur when @UITextArea is focused.\nCrtl+Enter in a text area should also submit the value (LIN-2621)\nWhen focusing on the Button with 'Enter' and hitting 'Enter', the value should be only submitted once (LIN-2620)
TS005.TC011             = @UICustomField
TS005.TC011.description = PasswordField component created with @UICustomField
TS005.TC011.items       = A fully functional password field should be shown.
TS005.TC012             = Dynamic Component
TS005.TC012.description = The type of the second component is dynamically changed depending on the selection of the ComboBox.
TS005.TC012.items       =

TS006 = LinkkiText

TS006.TC001             = LinkkiText
TS006.TC001.description = Tests the update and UI behavior of LinkkiText.
TS006.TC001.items       = Setting and changing the text\nSetting and changing the icon\nRemove the icon

TS007 = [Horizontal|Vertical]Layout

TS007.TC001             = Vertical Alignment in HorizontalLayout
TS007.TC001.description = Three HorizontalLayouts with a fixed height next to each other. Each layout contains one TextField with a specific alignment set.
TS007.TC001.items       = The TextField of the first layout should be placed at the top\nThe TextField of the second layout should be placed in the middle\nThe TextField of the last layout should be placed at the bottom of the layout
TS007.TC002             = Horizontal Alignment in VerticalLayout
TS007.TC002.description = Three VerticalLayouts with a fixed width next to each other. Each layout contains one TextField with a specific alignment set.
TS007.TC002.items       = The TextField of the first layout should be placed on the left\nThe TextField of the second layout should be placed in the middle\nThe TextField of the last layout should be placed on the right of the layout
TS007.TC003             = Spacing and Padding in HorizontalLayout
TS007.TC003.description = There are three HorizontalLayouts each contains three TextFields. \n The padding applies to the whole layout while the spacing is the space between the TextFields\n
TS007.TC003.items       = In the first layout padding and spacing are activated. \n In the second ayout padding and spacing are deactivated .\n In the third layout padding is activated and spacing is deactivated.
TS007.TC004             = Spacing and Padding in VerticalLayout
TS007.TC004.description = There are three VerticalLayouts each contains three TextFields. \n The padding applies to the whole layout while the spacing is the space between the TextFields \n
TS007.TC004.items       = In the first layout padding is deactivated and spacing is activated. \n In the second layout padding is not activated and spacing is activated .\n In the third layout padding and spacing are deactivated

TS008 = Aspects

TS008.TC001             = @BindTooltip
TS008.TC001.description = Tests the BindTooltip annotation
TS008.TC001.items       = The tooltip should be shown as title attribute and dynamically replaced with the content of the textfield.\n HTML content should be removed \n HTML <br> tags should be converted to \\n \n Static tooltips cannot be changed
TS008.TC002             = @BindCaption
TS008.TC002.description = Tests @BindCaption
TS008.TC002.items       = The caption of the section, checkbox and button should update dynamically \nThe header line should disappear if the section caption is empty \nThe header line should reappear if the section caption is non-empty
TS008.TC003             = Section caption with PresentationModelObject
TS008.TC003.description = Tests dynamic section captions with a button created by implementing PresentationModelObject
TS008.TC003.items       = The caption should update dynamically \nHeader button should be visible even if the caption is empty
TS008.TC004             = Section caption with @SectionHeader
TS008.TC004.description = @BindCaption with 
TS008.TC004.items       = The caption should update dynamically \nHeader button should be visible even if the caption is empty
TS008.TC005             = Section caption with close button
TS008.TC005.description = Tests dynamic section caption with close button
TS008.TC005.items       = The caption should update dynamically \nClosable button should be visible even if the caption is empty
TS008.TC006             = @BindVisible for PMOs
TS008.TC006.description = Test @BindVisible for PMOs
TS008.TC006.items       = The section should be able to close and hide on hide link click
TS008.TC007             = @BindIcon and @BindCaption
TS008.TC007.description = Tests the combination of @BindIcon and @BindCaption
TS008.TC007.items       = Changing icon should preserve the position of the icon\nIcon is displayed on the left with a padding for buttons and labels.\nIcons is displayed on the right with no padding for links.
TS008.TC008             = @BindStyleNames
TS008.TC008.description = Tests BindStyleNames annotation
TS008.TC008.items       = The section itself has style names that makes it blue, adds a border, and makes the font white and bold.\nThe field takes its input as style names
TS008.TC009             = @BindSuffix
TS008.TC009.description = Tests the BindSuffix annotation
TS008.TC009.items       = The first Textfield defines which value the dynamic suffix has\n The suffix of the second Textfield should update dynamically \n The suffix of the second Textfield should disappear if the suffix is empty \n The The suffix of the second Textfield should reappear if the suffix is non-empty \n The suffix of the third TextField is static
TS008.TC010             = @BindPlaceholder
TS008.TC010.description = Tests the BindPlaceholder annotation
TS008.TC010.items       = The first Textfield defines which value the dynamic placeholder has\n The placeholder of the second Textfield should update dynamically \n The placeholder of the second Textfield should disappear if the placeholder is empty \n The placeholder of the second Textfield should reappear if the placeholder is non-empty \n The placeholder of the third TextField is static

TS009 = Notifications

TS009.TC001             = Text Notifications
TS009.TC001.description = Notifications containing a title and a text.
TS009.TC001.items       = The notification variant (background color) is different depending on the severity\nInfo notifications close automatically\nWarning notifications close automatically\nError notifications close only when the button is clicked
TS009.TC002             = MessageList Notifications
TS009.TC002.description = Notifications containing a title and a list of messages. If the text is left is blank, the message is not created.
TS009.TC002.items       = The notification variant (background color) is dependant on the maximum severity message\nAll messages have an icon corresponding to their severity\nInfo notifications close automatically\nWarning notifications close automatically\nError notifications close only when the button is clicked

TS010 = LinkkiTabLayout

TS010.TC001             = Vertical Layout
TS010.TC001.description = A LinkkiTabLayout with horizontal orientation.
TS010.TC001.items       = The tab selectors are placed above of the content
TS010.TC002             = Horizontal Layout
TS010.TC002.description = A LinkkiTabLayout with vertical orientation.
TS010.TC002.items       = The tab selectors are placed on the left of the content
TS010.TC003             = Tab visibility
TS010.TC003.description = The visibility of the tabs can be set using the checkboxes. To apply the settings, the update button has to be pressed.
TS010.TC003.items       = Tabs set invisible are hidden\nTabs set to visible are shown\nIf the current tab is set invisible, the first visible tab should be selected\nWhen all tabs are invisible, all content should be invisible\n

TS011 = Dialogs

TS011.TC001             = OkCancelDialog Handlers
TS011.TC001.description = The okHandler and cancelHandler of the OkCancelDialog display a corresponding notification.
TS011.TC001.items       = The okHandler is run when the OK button is pressed\nThe cancelHandler is run when the Cancel button is pressed\nThe cancelHandler is run when the Escape key is pressed\nThe cancelHandler is run when the user clicks outside the dialog

TS011.TC002             = Question and Confirmation Dialog
TS011.TC002.description = Opens a Question or Confirmation dialog with the corresponding buttons
TS011.TC002.items       = The dialogs should render basic HTML Text as content.

TS012 = Tables

TS012.TC001             = Table with validation
TS012.TC001.description = Table to test the display of validation errors
TS012.TC001.items       = Validation error should be shown for names which do not end with index or for dates in the past.\nValidation markers must be visible after sidebar sheet switched.
TS012.TC002             = Selectable table
TS012.TC002.description = A table with single select
TS012.TC002.items       = Double click on table row should show notification\nSelect a row, click on "Update Comparison Values", both labels (table selection and PMO selection) should show the selected row.
TS012.TC003             = Columns With UITableColumn Annotation
TS012.TC003.description = Tests width and flexGrow in @UITableColumn
TS012.TC003.items       = Column 1 should have a width of 50px\nColumn 2 should have 3 times more excess width than column 4 and 5 (base width is somehow 100px if undefined)\nColumn 3 and column 4 should have the same width\nColumn 5 should have base width of 200px and the same amount of excess width as column 4 and 5
TS012.TC004             = Dynamic fields
TS012.TC004.description = Tests dynamic fields in tables
TS012.TC004.items       = Retention should be a text field for car type "Standard", and be a combo-box for car type "Premium"
TS012.TC005             = Table footer styling for sum
TS012.TC005.description = Tests a table with the style LinkkiApplicatonTheme.GRID_FOOTER_BOLD
TS012.TC005.items       = Footer texts should appear bold
TS012.TC006             = Table with placeholder
TS012.TC006.description = Tests table with @BindPlaceholder
TS012.TC006.items       = Table with @BindPlaceholder("No rows present."): Table including header and footer should be hidden and replaced by placeholder text if table has no items. Placeholder text should disappear if items are added.\nTable with with @BindPlaceholder(value = "", placeholderType = PlaceholderType.STATIC) value should hide empty table without showing any replacement text.\nTable without @BindPlaceholder annotation: Empty table including header and footer should still be shown, even if table has no items.
TS012.TC007             = Column text alignment
TS012.TC007.description = Columns with different text alignment set using @UITableColumn(textAlign = ...)
TS012.TC007.items       = DEFAULT and START should be left-aligned\r\nCENTER should be center-aligned\r\nEND should be right-aligned\r\nAlignment of footer and header should match the alignment of the column content

TS013 = Messages

TS013.TC001             = Message table
TS013.TC001.description = The table created by MessageUiComponents.createMessageTable
TS013.TC001.items       = The icon of the error message is an exclamation mark on a round red background.\nThe icon of the warning message is an exclamation mark on a triangle yellow background.\nThe icon of the info message is an i on a round blue background.
